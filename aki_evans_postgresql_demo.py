# -*- coding: utf-8 -*-
"""Aki Evans -  PostgreSQL Demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sjwWVYP309Ylx0KCevw_tELM0mt_duHy

# Live demo code for connecting to PostgreSQL from Python.
"""

!pip install psycopg2-binary

import psycopg2

dir(psycopg2)

help(psycopg2.connect)

dbname = 'vmbyndci'
user = 'vmbyndci'
password = 'xxx'  # Don't commit this!
host = 'raja.db.elephantsql.com'

pg_conn = psycopg2.connect(dbname=dbname, user=user,
                           password=password, host=host)

pg_conn

dir(pg_conn)

pg_curs = pg_conn.cursor()

pg_curs.execute('SELECT * FROM test_table;')
pg_curs.fetchall()

"""## What we're doing

We'd like to get the RPG data out of SQLite, and insert it into PostgreSQL.

Aka - we're making a data pipeline! Aka - an ETL (Extract Transform Load).
"""

!wget https://github.com/LambdaSchool/DS-Unit-3-Sprint-2-SQL-and-Databases/blob/master/module1-introduction-to-sql/rpg_db.sqlite3?raw=true

!ls -alh

!mv 'rpg_db.sqlite3?raw=true' rpg_db.sqlite3

import sqlite3
sl_conn = sqlite3.connect('rpg_db.sqlite3')
sl_curs = sl_conn.cursor()

# count how many characters in table 
sl_curs.execute('SELECT COUNT(*) FROM charactercreator_character;').fetchall()

# Our goal - an ETL/data pipeline from SQLite to Python
# Our target table (for live demo) - characters
# Extract step:
characters = sl_curs.execute('SELECT * FROM charactercreator_character;').fetchall()

characters[0]

characters[-1]

len(characters)

sl_curs.execute('PRAGMA table_info(charactercreator_character);').fetchall()

# Extract done! Next step - transform
# We need the PostgreSQL db to have a table with
# an appropriate schema
create_character_table = """
  CREATE TABLE charactercreator_character (
    character_id SERIAL PRIMARY KEY,
    name VARCHAR(30),
    level INT,
    exp INT,
    hp INT,
    strength INT,
    intelligence INT,
    dexterity INT,
    wisdom INT
  );
"""

pg_curs.execute(create_character_table)

# We can query tables if we want to check
# This is a clever optional thing, showing postgresql internals
show_tables = """
SELECT
   *
FROM
   pg_catalog.pg_tables
WHERE
   schemaname != 'pg_catalog'
AND schemaname != 'information_schema';
"""
pg_curs.execute(show_tables)
pg_curs.fetchall()

characters[0]

str(characters[0][1:])

# Transform (making the target ready to get data) done
# Now we need to actually load values, insert characters

example_insert = """
INSERT INTO charactercreator_character
(name, level, exp, hp, strength, intelligence, dexterity, wisdom)
VALUES """ + str(characters[0][1:])

print(example_insert)

# How do we do this for all characters? Loops!
for character in characters:
  insert_character = """
    INSERT INTO charactercreator_character
    (name, level, exp, hp, strength, intelligence, dexterity, wisdom)
    VALUES """ + str(character[1:]) + ';'
  # print(insert_character)
  pg_curs.execute(insert_character)

pg_curs.execute('SELECT * FROM charactercreator_character;')
pg_curs.fetchall()

# We can see it from this cursor - but not elephantsql.com!
# We have to commit
pg_curs.close()
pg_conn.commit()

# OK, we can see it in elephantsql.com now
# But let's also check programmatically
pg_curs = pg_conn.cursor()  # Make a new cursor
pg_curs.execute('SELECT * FROM charactercreator_character;')
pg_characters = pg_curs.fetchall()

characters[0]  # Original, from-SQLite characters

pg_characters[0]  # ETL'd PostgreSQL-hosted characters

for character, pg_character in zip(characters, pg_characters):
  assert character == pg_character

# Nothing happened - which means they're all the same!
# We have successfully performed and validated an ETL